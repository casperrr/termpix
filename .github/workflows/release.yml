name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build hatchling
        pip install -e .

    - name: Test package
      run: |
        # Test that the command exists and can show help
        termpix --help || echo "Help command may not be implemented"
        # Test that the module can be imported
        python -c "import termpix; print('✅ Package imports successfully')"
        # Test basic functionality
        python -m termpix || echo "✅ Basic run completed"

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install python-semantic-release
      run: |
        pip install python-semantic-release
        pip install build hatchling

    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Semantic Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        semantic-release version
        semantic-release publish

    - name: Get new version
      id: version
      run: |
        # Extract version directly from __init__.py without importing
        NEW_VERSION=$(grep -E "^__version__ = " src/termpix/__init__.py | cut -d '"' -f 2)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update local PKGBUILD
      run: |
        # Update version in PKGBUILD more carefully
        sed -i "s/^pkgver=.*/pkgver=${{ steps.version.outputs.new_version }}/" PKGBUILD
        git add PKGBUILD
        git commit -m "chore: update PKGBUILD to version ${{ steps.version.outputs.new_version }}" || echo "No PKGBUILD changes to commit"
        git push

    - name: Deploy to AUR
      uses: KSXGitHub/github-actions-deploy-aur@v2.7.2
      with:
        pkgname: pytermpix
        pkgbuild: ./PKGBUILD
        commit_username: github-actions[bot]
        commit_email: github-actions[bot]@users.noreply.github.com
        ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        commit_message: "Update to version ${{ steps.version.outputs.new_version }}"
        ssh_keyscan: true
        updpkgsums: true